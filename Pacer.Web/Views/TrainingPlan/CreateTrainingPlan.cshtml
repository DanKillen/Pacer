@model TrainingPlanCreateModel

<div class="card shadow p-4 mt-4 mx-auto w-75">
    <div class="position-absolute top-0 start-50 translate-middle rounded-circle bg-dark">
        <img src="\images\LogoTrimWIP.png" height="50px">
    </div>
    <h1 class="mx-auto">Create Training Plan</h1>
    <!-- Form to create a training plan -->
    <form asp-action="CreateTrainingPlan" asp-controller="TrainingPlan" method="post" role="form">

        <input type="hidden" asp-for="RunningProfileId" />

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="mt-3 text-center">
            <p>Beginner Training Plans are designed to carefully build up your mileage and are less demanding overall
                than Standard Plans.</p>
            <p>You will be more likely to hit your target time if you complete a Standard plan instead of
                Beginner.</p>
            <p>Half-Marathon training plans last for twelve weeks, while Marathon training plans last for sixteen weeks.
            </p>
        </div>
        <hr class="custom-hr">
        <!-- Recommendations based on running profile-->
        <div class="mt-3 text-center">
            @foreach (var recommendationPart in Model.Recommendation)
            {
                <p><b>@recommendationPart</b></p>
            }
        </div>
        <hr class="custom-hr">
        <div class="mt-3">
            <label asp-for="TargetRace" class="form-label" id="raceTypeLabel">Training Plan 
                @await Component.InvokeAsync("Tooltip", new {key = "CreateTrainingPlan" })</label>
            <select id="raceTypeDropdown" asp-for="TargetRace" asp-items="Html.GetEnumSelectList<RaceType>()"
                class="form-control" aria-labelledby="raceTypeLabel" onchange="updateTargetDate();"></select>
            <span asp-validation-for="TargetRace" class="text-danger"></span>
        </div>

        <div class="mt-3">
            <label asp-for="RaceDate" class="form-label" id="raceDateLabel">Date of Race 
                @await Component.InvokeAsync("Tooltip", new { key = "CreateDateofRace" })</label>
            <input type="date" asp-for="RaceDate" class="form-control" aria-labelledby="raceDateLabel" />
            <span asp-validation-for="RaceDate" class="text-danger"></span>
        </div>

        <div class="mt-3">
            <label id="targetTimeLabel" class="form-label"></label>@await Component.InvokeAsync("Tooltip", new { key =
            "CreateTargetTime" })
            <input id="targetTimeInput" type="range" class="form-control" min="60" max="240" step="1"
                aria-labelledby="targetTimeLabel" oninput="displayTime(this.value)" />
            <span id="targetTimeDisplay">@Model.EstimatedHalfMarathonTime.ToString("h\\:mm")</span>
            <span asp-validation-for="TargetTime" class="text-danger"></span>
        </div>

        <input type="hidden" asp-for="TargetTime" id="hiddenTargetTime" />


        <div class="mt-3">
            <button type="submit" class="btn btn-primary btn-block loading-button">
                Create Plan
            </button>
            <a class="btn btn-link ms-3" asp-controller="Home" asp-action="Index">Cancel</a>
        </div>

    </form>
</div>

@{
    var marathonValue = ((int)RaceType.Marathon).ToString();
    var bMarathonValue = ((int)RaceType.BMarathon).ToString();
    var halfMarathonValue = ((int)RaceType.HalfMarathon).ToString();
    var bHalfMarathonValue = ((int)RaceType.BHalfMarathon).ToString();
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
<!-- Scripts to handle the RaceTime slider and auto-updating of Race Date-->
    <script>
        function displayTime(minutes) {
            // Convert the minutes into a TimeSpan or similar format
            var hours = Math.floor(minutes / 60);
            minutes %= 60;
            var timeString = hours + ":" + (minutes < 10 ? "0" : "") + minutes;

            document.getElementById('targetTimeDisplay').textContent = timeString;

            document.getElementById('hiddenTargetTime').value = timeString;
        }
        function updateTargetDate() {
            var raceTypeDropdown = document.getElementById('raceTypeDropdown');
            var targetTimeSlider = document.getElementById('targetTimeInput');
            var targetTimeLabel = document.getElementById('targetTimeLabel');
            var raceDateInput = document.getElementById('RaceDate');
            var selectedRaceType = raceTypeDropdown.options[raceTypeDropdown.selectedIndex].value;

            var today = new Date();
            var daysUntilSunday = (7 - today.getDay()) % 7;

            if (selectedRaceType === '@marathonValue' || selectedRaceType === '@bMarathonValue') {
                targetTimeSlider.min = 125; // 2 hours 5 minutes in minutes
                targetTimeSlider.max = 300; // 5 hours in minutes
                targetTimeSlider.value = Math.floor('@(Model.EstimatedMarathonTime.TotalMinutes)');
                targetTimeLabel.textContent = 'Marathon Target Time';

                today.setDate(today.getDate() + daysUntilSunday + 16 * 7); // Add 16 weeks to the date
            } else if (selectedRaceType === '@halfMarathonValue' || selectedRaceType === '@bHalfMarathonValue') {
                targetTimeSlider.min = 60; // 1 hour in minutes
                targetTimeSlider.max = 150; // 2.5 hours in minutes
                targetTimeSlider.value = Math.floor('@(Model.EstimatedHalfMarathonTime.TotalMinutes)');
                targetTimeLabel.textContent = 'Half Marathon Target Time';
                today.setDate(today.getDate() + daysUntilSunday + 12 * 7); // Add 12 weeks to the date
            }
            var dateString = today.toISOString().split('T')[0];
            raceDateInput.value = dateString;
            displayTime(targetTimeSlider.value);
        }
        updateTargetDate();

    </script>
}
